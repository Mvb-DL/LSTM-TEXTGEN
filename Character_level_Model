%load_ext tensorboard
import tensorflow as tf
from tensorflow.python.client import device_lib 
import os
import numpy as np
import keras
from datetime import datetime
from packaging import version
from matplotlib import pyplot as plt

if len(device_lib.list_local_devices()) > 1:
    print("GPU is activated")

path_to_file = "filename.txt" 
text = open(path_to_file, 'rb').read().decode(encoding='utf-8')

vocab = sorted(set(text))
charidx = {u:i for i, u in enumerate(vocab)}
idxchar = np.array(vocab)

def text_to_int(text):
  return np.array([charidx[c] for c in text])

text_as_int = text_to_int(text)

def int_to_text(ints):
  try:
    ints = ints.numpy() 
  except:
    pass
  return ''.join(idxchar[ints]) 

seq_length = 200 
examples_per_epoch = len(text)//(seq_length+1)

char_dataset = tf.data.Dataset.from_tensor_slices(text_as_int)

sequences = char_dataset.batch(seq_length+1, drop_remainder=True) 

def split_input_target(chunk):  
    input_text = chunk[:-1]  
    target_text = chunk[1:]  
    return input_text, target_text  
dataset = sequences.map(split_input_target)  

BATCH_SIZE = 64 
VOCAB_SIZE = len(vocab) 
EMBEDDING_DIM = 256
RNN_UNITS = 256
epochs = 10
 
BUFFER_SIZE = len(text) 
data = dataset.shuffle(BUFFER_SIZE).batch(BATCH_SIZE, drop_remainder=True).prefetch(tf.data.experimental.AUTOTUNE)

logdir = "logs/scalars/" + datetime.now().strftime("%Y%m%d-%H%M%S")
tensorboard_callback = keras.callbacks.TensorBoard(log_dir=logdir)      

def build_model(vocab_size, embedding_dim, rnn_units, batch_size):
  model = tf.keras.Sequential([
    tf.keras.layers.Embedding(vocab_size, embedding_dim,       
                              batch_input_shape=[batch_size, None]),
    tf.keras.layers.LSTM(rnn_units,                           
                        activation='tanh', #Aktivierungsfunktion by default: tanh
                        recurrent_activation='sigmoid', 
                        return_sequences=True,
                        stateful=True,
                        recurrent_initializer='glorot_uniform', 
                        go_backwards=False, 
                        dropout=0.1,
                        recurrent_dropout=0.0,
                        unroll=False,                   
                        ),
      tf.keras.layers.LSTM(rnn_units,                           
                        activation='tanh', 
                        recurrent_activation='sigmoid', 
                        return_sequences=True,
                        stateful=True,
                        recurrent_initializer='glorot_uniform', 
                        go_backwards=False, 
                        dropout=0.1,
                        recurrent_dropout=0.0,
                        unroll=False,                    
                        ),     
    tf.keras.layers.Dense(vocab_size)                          
  ])
  return model
model = build_model(VOCAB_SIZE,EMBEDDING_DIM, RNN_UNITS, BATCH_SIZE )  
model.summary()

for input_example_batch, target_example_batch in data.take(1):
  example_batch_predictions = model(input_example_batch)

def loss(labels, logits): #!!
  return tf.keras.losses.sparse_categorical_crossentropy(labels, logits, from_logits=True)

lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(
    initial_learning_rate=0.001,
    decay_steps=100000,
    decay_rate=0.96)

optimizer = tf.keras.optimizers.Adam(learning_rate=lr_schedule)
metrics = tf.keras.metrics.SparseCategoricalAccuracy()

model.compile(optimizer=optimizer, loss=loss, metrics= metrics)

checkpoint_dir = './training_checkpoints'

checkpoint_prefix = os.path.join(checkpoint_dir, "ckpt_{epoch}")

checkpoint_callback= tf.keras.callbacks.ModelCheckpoint(
    filepath=checkpoint_prefix,
    save_weights_only=True)
                      
early_callback= tf.keras.callbacks.EarlyStopping(monitor='loss', patience=5, min_delta=0.0001)

%%time
history = model.fit(data, epochs=epochs, callbacks=[checkpoint_callback,tensorboard_callback,early_callback])
results = model.evaluate(data)
%tensorboard --logdir logs/scalars

print(f'Test loss: {results[0]} / Test accuracy: {results[1]}')
plt.plot(history.epoch, history.history['loss'], label='total loss')
plt.show()

model = build_model(VOCAB_SIZE, EMBEDDING_DIM, RNN_UNITS, batch_size=1)

model.load_weights(tf.train.latest_checkpoint(checkpoint_dir))
model.build(tf.TensorShape([1, None])) 

def generate_text(model, start_string):
 
  num_generate = 1000

  input_eval = [charidx[s] for s in start_string]
  input_eval = tf.expand_dims(input_eval, 0)

  text_generated = []

  temperature = 1.0
 
  model.reset_states()
  for i in range(num_generate):
      predictions = model(input_eval)
    
      predictions = tf.squeeze(predictions, 0)

      predictions = predictions / temperature
      predicted_id = tf.random.categorical(predictions, num_samples=1)[-1,0].numpy()

      input_eval = tf.expand_dims([predicted_id], 0)

      text_generated.append(idxchar[predicted_id])

  return (start_string + ''.join(text_generated))

inp = input("Gib einen Text ein: ")
print(generate_text(model, inp))                
